@page "/streamdata"

@using AlpacaHerder.Shared
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager navigationManager

<h3>Stream Data</h3>
<br />

Message: @message

@if (quote != null) {
	@*<table>
		<tbody>
			<tr>Symbol <td>@data.Symbol</td></tr>
			<tr>Bid <td>@data.BidPrice (@data.BidSize)</td></tr>
			<tr>Ask <td>@data.AskPrice (@data.AskSize)</td></tr>
			<tr>RefreshTime <td>@data.TimestampUtc</td></tr>
		</tbody>	
	</table>*@
    <span>Quote: @quote.ToString()</span>
}

@if (trade != null) {
    <span>Trade: @trade.ToString()</span>
}

@code {
    private string message = "waiting...";
    private Quote quote;
    private Trade trade;
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync() {

        hubConnection = new HubConnectionBuilder()
                    .WithUrl(navigationManager.ToAbsoluteUri("/marketdatahub"))
                    .WithAutomaticReconnect()
                    .Build();

        hubConnection.On<Quote>("QuoteReceived", (Quote) => {
            message = $"Quote Received at {DateTime.Now}";
            quote = Quote;
            InvokeAsync(() => StateHasChanged()).GetAwaiter().GetResult();
        });

        hubConnection.On<Trade>("TradeReceived", (Trade) => {
            message = $"Trade Received at {DateTime.Now}";
            trade = Trade;
            InvokeAsync(() => StateHasChanged()).GetAwaiter().GetResult();
        });

        hubConnection.On<string>("Subscribed", (Message) => {
            message = Message;
            InvokeAsync(() => StateHasChanged()).GetAwaiter().GetResult();
        });

        hubConnection.On<string>("UnSubscribed", (Message) => {
            message = Message;
            InvokeAsync(() => StateHasChanged()).GetAwaiter().GetResult();
        });

        await hubConnection.StartAsync();
    }

    public bool IsConnected
        => hubConnection.State == HubConnectionState.Connected;

    public void Dispose() {
        if (hubConnection is not null) {
            _ = hubConnection.DisposeAsync();
        }
    }
}